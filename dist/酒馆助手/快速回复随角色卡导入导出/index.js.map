{"version":3,"file":"index.js","mappings":"AAsDAA,eAAeC,EAAiBC,EAAsBC,EAAiC,CAAC,GACtF,MAAMC,EACGD,EAAOE,OAAS,UAInBC,GAHIH,EAAOI,OAnBnB,SAAqBL,GACnB,IACE,OAAO,IAAIM,IAAIN,EACjB,CAAE,MAAOO,GACP,MACF,CACF,CAgBcC,CAAYR,IACpBI,IACFJ,QAAqBS,MAAML,GAAKM,KAAKC,GAAWA,EAAQC,SAE1D,MAAMC,EAlBR,SAAsBb,GACpB,IACE,OAAOc,KAAKC,MAAMf,EACpB,CAAE,MAAOO,GACP,MACF,CACF,CAYqDS,CAAahB,GAChE,IAAKa,EAIH,YAHAI,QAAQC,KACN,gEAKJ,MAAMC,EAAgBN,EAAgBO,OACtCC,aAAa,8DAEIR,EAAgBS,mCACXT,EAAgBS,gCACnBT,EAAgBS,sCACTT,EAAgBU,sBAAsBV,EAAgBW,2BAC9EX,EAAgBY,eACdZ,EAAgBS,gBAChBH,EACCO,IACCC,GACE,kBAAkBd,EAAgBS,cAAcK,EAAGC,SAASD,EAAGE,KAAO,QAAQF,EAAGE,OAAS,gBACxFF,EAAGG,oBACMH,EAAGI,oBAAoBJ,EAAGK,yBAAyBL,EAAGM,qBAAqBN,EAAGO,oBACvFP,EAAGQ,2BACGR,EAAGS,0BAA0BT,EAAGU,mCAAmCV,EAAGW,UAAUX,EAAGY,QACxFC,WAAW,IAAK,OAChBA,WAAW,SAAU,YACrBA,WAAW,SAAU,YACrBA,WAAW,KAAM,mBAEvBC,KAAK,YACNtB,EACCuB,OAAOf,GAAgC,IAA1BA,EAAGgB,YAAYC,QAC5BlB,IAAIC,GACHA,EAAGgB,YACAjB,IACCmB,GACE,sBAAsBhC,EAAgBS,cAAcK,EAAGC,YAAYD,EAAGmB,YAAYD,EAAQE,cAAcF,EAAQG,aAEnHP,KAAK,aAGV,CACEQ,QAAS,GACTC,UAAW,2BAA2BjD,EAAOI,WAAWQ,EAAgBS,aACxE6B,OAAQ,sBAAsBlD,EAAOI,WAAWQ,EAAgBS,cAChEpB,gDAIR,CAsBAkD,EAAE,IApBFtD,iBACEsD,EAAE,kBAAkBC,KAAK,WAAW,GAAM,GAAGC,cAAc,IAAIC,MAAM,iBAE5CC,oBAEtBd,OAAOe,GAASA,EAAMC,SACtBC,QAAQF,IACP,MAAMG,EAAQH,EAAMI,YAAYD,MAAM,sCACtC,IAAKA,EACH,OAEF,MAAM3D,EAA2C,CAC/CE,MAAO,CAAE,IAAK,UAAW,GAAI,YAAa,GAAI,UAAWyD,EAAM,IAC/DvD,OAAQ,CAAE,MAAM,EAAM,OAAO,GAAQuD,EAAM,KAE7C3C,QAAQ6C,KAAK,gBAAgBL,EAAMI,4BAA4B/C,KAAKiD,UAAU9D,MAC9EF,EAAiB0D,EAAMO,eAAgB/D,IAE7C,CAEQgE","sources":["src://tavern_helper_template/src/酒馆助手/快速回复随角色卡导入导出/index.ts"],"sourcesContent":["export {};\n\ninterface QuickReplySet {\n  version: number;\n  name: string;\n  disableSend: boolean;\n  placeBeforeInput: boolean;\n  injectInput: boolean;\n  color: string;\n  onlyBorderColor: boolean;\n  qrList: QuickReply[];\n  idIndex: number;\n}\n\ninterface QuickReply {\n  id: number;\n  icon: string;\n  showLabel: boolean;\n  label: string;\n  title: string;\n  message: string;\n  contextList: { set: string; isChained: boolean }[];\n  preventAutoExecute: boolean;\n  isHidden: boolean;\n  executeOnStartup: boolean;\n  executeOnUser: boolean;\n  executeOnAi: boolean;\n  executeOnChatChange: boolean;\n  executeOnGroupMemberDraft: boolean;\n  executeOnNewChat: boolean;\n  automationId: string;\n}\n\ninterface ImportQuickReplyOption {\n  scope?: 'disable' | 'character' | 'global';\n  button?: boolean;\n}\n\nfunction tryParseUrl(file_content: string): URL | undefined {\n  try {\n    return new URL(file_content);\n  } catch (error) {\n    return undefined;\n  }\n}\n\nfunction tryParseJson(file_content: string): QuickReplySet | undefined {\n  try {\n    return JSON.parse(file_content);\n  } catch (error) {\n    return undefined;\n  }\n}\n\nasync function importQuickReply(file_content: string, option: ImportQuickReplyOption = {}): Promise<void> {\n  const required_option: Required<ImportQuickReplyOption> = {\n    scope: option.scope ?? 'disable',\n    button: option.button ?? true,\n  };\n\n  const url = tryParseUrl(file_content);\n  if (url) {\n    file_content = await fetch(url).then(request => request.text());\n  }\n  const quick_reply_set: QuickReplySet | undefined = tryParseJson(file_content);\n  if (!quick_reply_set) {\n    console.warn(\n      `[自动导入快速回复] 未能成功导入快速回复, 请确认所给的内容是一个正确的快速回复文件内容, 或是快速回复文件的链接网址`,\n    );\n    return;\n  }\n\n  const quick_replies = quick_reply_set.qrList;\n  triggerSlash(`\n    /parser-flag STRICT_ESCAPING on ||\n    /qr-set-off \"${quick_reply_set.name}\" ||\n    /qr-chat-set-off \"${quick_reply_set.name}\" ||\n    /qr-set-delete ${quick_reply_set.name} ||\n    /qr-set-create nosend=${quick_reply_set.disableSend} before=${quick_reply_set.placeBeforeInput} inject=${\n    quick_reply_set.injectInput\n  } ${quick_reply_set.name} ||\n    ${quick_replies\n      .map(\n        qr =>\n          `/qr-create set=${quick_reply_set.name} label=${qr.label} ${qr.icon ? `icon=${qr.icon}` : ``} showlabel=${\n            qr.showLabel\n          } hidden=${qr.isHidden} startup=${qr.executeOnStartup} user=${qr.executeOnUser} bot=${qr.executeOnAi} load=${\n            qr.executeOnChatChange\n          } new=${qr.executeOnNewChat} group=${qr.executeOnGroupMemberDraft} title=${qr.title} \"${qr.message\n            .replaceAll('\"', '\\\\\"')\n            .replaceAll('<user>', '{{user}}')\n            .replaceAll('<char>', '{{char}}')\n            .replaceAll('{{', '\\\\{\\\\{')}\" ||\\n`,\n      )\n      .join('')}\n    ${quick_replies\n      .filter(qr => qr.contextList.length !== 0)\n      .map(qr =>\n        qr.contextList\n          .map(\n            context =>\n              `/qr-contextadd set=${quick_reply_set.name} label=${qr.label} id=${qr.id} chain=${context.isChained} \"${context.set}\" ||\\n`,\n          )\n          .join(''),\n      )}\n    ${\n      {\n        disable: ``,\n        character: `/qr-chat-set-on visible=${option.button} \"${quick_reply_set.name}\" ||\\n`,\n        global: `/qr-set-on visible=${option.button} \"${quick_reply_set.name}\" ||\\n`,\n      }[required_option.scope]\n    }\n    /parser-flag STRICT_ESCAPING off ||\n`);\n}\n\nasync function importQuickReplyFromRegex(): Promise<void> {\n  $('#qr--isEnabled').prop('checked', true)[0].dispatchEvent(new Event('click'));\n\n  const regex_data = await getTavernRegexes();\n  regex_data\n    .filter(regex => regex.enabled) // 只导入被启用的快速回复正则\n    .forEach(regex => {\n      const match = regex.script_name.match(/^快速回复-(不启用|聊天|全局)-(显示按钮|不显示按钮)-.*$/);\n      if (!match) {\n        return;\n      }\n      const option: Required<ImportQuickReplyOption> = {\n        scope: { 不启用: 'disable', 聊天: 'character', 全局: 'global' }[match[1]] as 'disable' | 'character' | 'global',\n        button: { 显示按钮: true, 不显示按钮: false }[match[2]] as boolean,\n      };\n      console.info(`[自动导入快速回复] 从 ${regex.script_name} 中导入快速回复, 选项: ${JSON.stringify(option)}`);\n      importQuickReply(regex.replace_string, option);\n    });\n}\n\n$(() => importQuickReplyFromRegex());\n"],"names":["async","importQuickReply","file_content","option","required_option","scope","url","button","URL","error","tryParseUrl","fetch","then","request","text","quick_reply_set","JSON","parse","tryParseJson","console","warn","quick_replies","qrList","triggerSlash","name","disableSend","placeBeforeInput","injectInput","map","qr","label","icon","showLabel","isHidden","executeOnStartup","executeOnUser","executeOnAi","executeOnChatChange","executeOnNewChat","executeOnGroupMemberDraft","title","message","replaceAll","join","filter","contextList","length","context","id","isChained","set","disable","character","global","$","prop","dispatchEvent","Event","getTavernRegexes","regex","enabled","forEach","match","script_name","info","stringify","replace_string","importQuickReplyFromRegex"],"sourceRoot":""}
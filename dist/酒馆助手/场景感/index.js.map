{"version":3,"file":"index.js","mappings":"AAAAA,EAAE,KACAC,8BAA8B,CAC5B,CAAEC,KAAM,KAAMC,SAAS,GACvB,CAAED,KAAM,SAAUC,SAAS,GAC3B,CAAED,KAAM,KAAMC,SAAS,GACvB,CAAED,KAAM,MAAOC,SAAS,KAG1BC,QAAQC,eAAe,MAAOC,gBACtBC,mBAAmB,CAAC,CAAEC,KAAM,OAAQC,QAAS,kBAC7CC,aAAa,cAGrBN,QAAQC,eAAe,UAAWC,UAChC,MAAMK,EAAiBL,MACrBM,EACAC,KAEA,IAAKA,EACH,OAEF,MAAMC,EAASC,EAAEC,IAAIJ,EAAMC,OAAMI,GACjC,MAAsB,mBAAXH,QACIA,IAERA,GAGHI,EAA4BZ,MAChCa,EACAC,UAEaT,EACXS,QACOV,aAAa,mBAAmBW,KAAKC,UAAUC,OAAOC,KAAKJ,OAAaD,MAI7EM,QAAaP,EAA0B,QAAS,CACpD,MAAOZ,UACL,MAAMQ,QAAgBY,YAAYC,iBAChC,wCACAD,YAAYE,WAAWC,MACvB,GACA,CAAEC,KAAM,IAEV,GAAKhB,EAIL,MAAO,IAAIA,OAHTiB,OAAOC,MAAM,YAAa,QAK9B,KAAM,eACN,KAAM1B,UACJ,MAAMc,EAAU,CACd,GAAI,GACJ,GAAI,IACKT,EAAeS,EAASL,EAAEkB,OAAOV,OAAOC,KAAKJ,KAEtD,KACE,4DACF,IAAK,0CACL,KAAM,2CACN,KAAM,wDACN,KACE,2EACF,KACE,+GAGJ,OAAOT,EACLS,QACOV,aAAa,mBAAmBW,KAAKC,UAAUC,OAAOC,KAAKJ,mBAIxE,QAAaH,IAATQ,EACF,OAGF,MAAMS,QAAahB,EAA0B,UAAW,CACtD,MAAOZ,UACL,MAAMQ,QAAgBY,YAAYC,iBAAiB,WAAYD,YAAYE,WAAWC,MAAO,GAAI,CAC/FC,KAAM,IAKR,OAHKhB,GACHiB,OAAOC,MAAM,YAAa,OAErBlB,GAET,GAAI,SACJ,KAAM,4CAER,QAAaG,IAATiB,EACF,OAGF,MAAMC,EAAyB,CAC7B,GAAI,GACJ,GAAI7B,SACKK,EAAewB,EAAwBpB,EAAEkB,OAAOV,OAAOC,KAAKW,KAErE,KAAM,2CACN,KAAM,mDACN,KAAM,qDACN,KAAM,oDAEFC,QAAuBlB,EAA0B,UAAWiB,QAC3ClB,IAAnBmB,UAIE7B,mBAAmB,CACvB,CACEC,KAAM,OACNC,QAASM,EAAE,CAACU,EAAMS,EAAME,IACrBC,OAAOC,KAAYA,GACnBC,KAAK,eAGN7B,aAAa,eAGrBN,QAAQC,eAAe,MAAOC,UAC5B,MAAMQ,QAAgBY,YAAYC,iBAAiB,WAAYD,YAAYE,WAAWC,MAAO,GAAI,CAC/FC,KAAM,IAEHhB,UAGCP,mBAAmB,CACvB,CACEC,KAAM,OACNC,QACE,gEACAK,WAGAJ,aAAa,eAGrBN,QAAQC,eAAe,OAAQC,UAC7B,MAAMQ,QAAgBY,YAAYC,iBAChC,iBACAD,YAAYE,WAAWC,MACvB,GACA,CAAEC,KAAM,IAELhB,UAGCP,mBAAmB,CACvB,CACEC,KAAM,OACNC,QACE,+GACAK,WAGAJ,aAAa","sources":["src://tavern_helper_template/src/酒馆助手/场景感/index.ts"],"sourcesContent":["$(() => {\n  appendInexistentScriptButtons([\n    { name: '推进', visible: true },\n    { name: '切换视角推进', visible: true },\n    { name: '完结', visible: true },\n    { name: '后日谈', visible: true },\n  ]);\n\n  eventOn(getButtonEvent('推进'), async () => {\n    await createChatMessages([{ role: 'user', message: '延续当前剧情' }]);\n    await triggerSlash('/trigger');\n  });\n\n  eventOn(getButtonEvent('切换视角推进'), async () => {\n    const get_and_invoke = async (\n      data: Record<string, string | (() => string | undefined) | (() => Promise<string | undefined>)>,\n      path: string | undefined,\n    ): Promise<string | undefined> => {\n      if (!path) {\n        return undefined;\n      }\n      const result = _.get(data, path, undefined);\n      if (typeof result === 'function') {\n        return await result();\n      }\n      return result;\n    };\n\n    const query_prompt_from_buttons = async (\n      prompt: string,\n      options: Record<string, string | (() => string | undefined) | (() => Promise<string | undefined>)>,\n    ) => {\n      return await get_and_invoke(\n        options,\n        (await triggerSlash(`/buttons labels=${JSON.stringify(Object.keys(options))} ${prompt}`)) as string,\n      );\n    };\n\n    const view = await query_prompt_from_buttons('请选择视角', {\n      自定义视角: async () => {\n        const result = (await SillyTavern.callGenericPopup(\n          '接下来一条消息将会以哪些人或社交媒体（如贴吧、论坛、直播平台）的视角进行?',\n          SillyTavern.POPUP_TYPE.INPUT,\n          '',\n          { rows: 4 },\n        )) as string;\n        if (!result) {\n          toastr.error('请填写要采用的视角', '场景感');\n          return undefined;\n        }\n        return `以${result}的视角`;\n      },\n      随机人物: '与当前剧情末尾不同的人物',\n      选择媒体: async () => {\n        const options = {\n          正常: '',\n          随机: () => {\n            return get_and_invoke(options, _.sample(Object.keys(options)));\n          },\n          正经严肃:\n            '以正经严肃（以客观中立的态度讨论各类话题，重视事实依据，避免戏谑和轻浮，展现出专业和权威的氛围）类型社交媒体的视角',\n          二次元: '以二次元（热衷于发布动漫内容，使用动漫术语、颜文字和表情包）类型社交媒体的视角',\n          阴阳怪气: '以阴阳怪气（说话拐弯抹角，充满暗示和影射，阴阳怪气地嘲讽他人）类型社交媒体的视角',\n          荒诞搞笑: '以荒诞搞笑（大胆颠覆现实逻辑，充满黑色幽默和荒诞元素，以离奇的展开和疯狂的逻辑引发笑声）类型社交媒体的视角',\n          色情淫靡:\n            '以色情淫靡（将女性视为泄欲工具，口不遮掩地说肉便器、鸡吧套子等淫语，对女性进行意淫和侮辱，并幻想女性和{{user}}的关系）类型社交媒体的视角',\n          痴女发癫:\n            '以痴女发癫（都是爱慕{{user}}的痴女，互相之间帮助或雌竞争吵，毫不掩饰地表达对{{user}}各种想法（包括变态、淫乱的想法），最终目的是攻略{{user}}，必须有主要角色在上面偷偷发言）类型社交媒体的视角',\n        } as const;\n\n        return get_and_invoke(\n          options,\n          (await triggerSlash(`/buttons labels=${JSON.stringify(Object.keys(options))} 请选择媒体类型`)) as string,\n        );\n      },\n    });\n    if (view === undefined) {\n      return;\n    }\n\n    const plot = await query_prompt_from_buttons('请选择推进方式', {\n      自定义剧情: async () => {\n        const result = (await SillyTavern.callGenericPopup('具体会发生什么?', SillyTavern.POPUP_TYPE.INPUT, '', {\n          rows: 4,\n        })) as string;\n        if (!result) {\n          toastr.error('请填写要指定的剧情', '场景感');\n        }\n        return result;\n      },\n      推进: '延续当前剧情',\n      与此同时: '回到上一段剧情的开头，根据前文的内容，于下一个响应从另一个视角重新描述故事情节',\n    });\n    if (plot === undefined) {\n      return;\n    }\n\n    const writting_style_options = {\n      正常: '',\n      随机: async () => {\n        return get_and_invoke(writting_style_options, _.sample(Object.keys(writting_style_options)));\n      },\n      真实心理: '应用真实心理（不隐瞒角色内心真实想法，包括各种丑恶、阴暗、变态的想法）的描写风格',\n      极致感官: '应用极致感官（描写感官体验时要极尽细腻,包括视觉、听觉、嗅觉、味觉、触觉等全方位感受）的描写风格',\n      原始本能: '应用原始本能（展现角色最原始的生理反应和冲动，不加掩饰，也不遮掩角色的特殊性癖和变态倾向）的描写风格',\n      淫乱幻想: '应用淫乱幻想（展现女性角色内心的淫靡幻想，从充满欲望的视角观察和幻想{{user}}）的描写风格',\n    };\n    const writting_style = await query_prompt_from_buttons('请选择描写风格', writting_style_options);\n    if (writting_style === undefined) {\n      return;\n    }\n\n    await createChatMessages([\n      {\n        role: 'user',\n        message: _([view, plot, writting_style])\n          .filter(string => !!string)\n          .join('\\n'),\n      },\n    ]);\n    await triggerSlash('/trigger');\n  });\n\n  eventOn(getButtonEvent('完结'), async () => {\n    const result = (await SillyTavern.callGenericPopup('故事将如何完结?', SillyTavern.POPUP_TYPE.INPUT, '', {\n      rows: 4,\n    })) as string;\n    if (!result) {\n      return;\n    }\n    await createChatMessages([\n      {\n        role: 'user',\n        message:\n          '<Request:本故事就此完结。请以第三人称结束这个故事，不要再留下悬念或转折，但可以以欧亨利风格结尾，让读者意犹未尽>' +\n          result,\n      },\n    ]);\n    await triggerSlash('/trigger');\n  });\n\n  eventOn(getButtonEvent('后日谈'), async () => {\n    const result = (await SillyTavern.callGenericPopup(\n      '该后日谈的标题或详细剧情是?',\n      SillyTavern.POPUP_TYPE.INPUT,\n      '',\n      { rows: 4 },\n    )) as string;\n    if (!result) {\n      return;\n    }\n    await createChatMessages([\n      {\n        role: 'user',\n        message:\n          '<Request:本故事是之前所有故事（包括完结和之前已有的后日谈）的后日谈。你应该依据下面给出的后日谈标题或详细剧情，以第三人称直接叙述一个完整的故事，不要再留下悬念或转折，但可以以欧亨利风格结尾，让读者意犹未尽>' +\n          result,\n      },\n    ]);\n    await triggerSlash('/trigger');\n  });\n});\n"],"names":["$","appendInexistentScriptButtons","name","visible","eventOn","getButtonEvent","async","createChatMessages","role","message","triggerSlash","get_and_invoke","data","path","result","_","get","undefined","query_prompt_from_buttons","prompt","options","JSON","stringify","Object","keys","view","SillyTavern","callGenericPopup","POPUP_TYPE","INPUT","rows","toastr","error","sample","plot","writting_style_options","writting_style","filter","string","join"],"sourceRoot":""}
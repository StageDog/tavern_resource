{"version":3,"file":"index.js","mappings":"AAAA,IAAIA,EAAiB,GAUrBC,eAAeC,EAASC,EAAiCC,GACvD,MAAMC,EAAyBC,EAAEH,GAC3BI,EAAaC,SAASH,EAAuBI,KAAK,UACxDL,EAAUA,SAAkBM,aAAa,uBAAuBH,MAAkB,GAElF,MAAMI,EAAWN,EAAuBO,KAAK,aAC7CD,EAASE,KAAK,UAAU,GAExB,MAAMC,EAAMT,EAAuBO,KAAK,iBACxC,GAAIE,EAAIC,OAAS,EAGf,OAFAD,EAAID,KAAK,UAAU,QACnBG,UAAU,OAAOT,IAAcH,GAIjC,MAAMa,EAAiB,4BAA4BC,KAAKC,UAAUf,gBAC5DgB,EAAoB,+BAA+Bb,eACnDc,EAAoBrB,EAAOsB,QAAQ,UAAW,GAAGL,IAAiBG,YAElEG,EAASjB,EAAE,YACdG,KAAK,SAAUY,GACfG,SAAS,gBACTC,IAAI,SAAU,QACdA,IAAI,SAAU,YACdA,IAAI,QAAS,QACbC,YAAYrB,EAAuBO,KAAK,aAE1B,IAAIe,iBAAiB,KAClBrB,EAAE,oBACNsB,SAASC,GAAGlB,KACxBA,EAASE,KAAK,UAAU,GACxBU,EAAOV,KAAK,UAAU,MAIjBiB,QAAQnB,EAASoB,IAAI,GAAmB,CAAEC,WAAW,EAAMC,SAAS,EAAMC,eAAe,GACpG,CAEAjC,eAAekC,IACb,MAAMC,EAAQ9B,EAAE,SAAS+B,SAAS,gDAClC,IAAK,MAAMC,KAAQF,EACjBlC,EAASoC,EAEb,EApDA,WAEE,MAAMxB,EAAMR,EAAE,sBAAsBG,KAAK,UACzC,IAAKK,EACH,MAAMyB,MAAM,4BAEdvC,EAASc,CACX,CAsDA0B,GACAL,IACAM,QAAQC,cAAcC,gBAAiBR,GACvCM,QAAQC,cAAcE,2BAA4BT,GAClDM,QAAQC,cAAcG,sBAAuBV,GAC7CM,QAAQC,cAAcI,gBAAiBX,GACvCM,QAAQC,cAAcK,eAAgBZ,GACtCM,QAAQC,cAAcM,sBAdtB/C,eAA0BG,GACxB,MAAMkC,EAAOhC,EAAE,SAAS+B,SAAS,iBAAiBN,IAAI,GAClDO,GACFpC,EAASoC,EAAMlC,EAEnB","sources":["src://tavern_helper_template/src/酒馆助手/流式传输/index.ts"],"sourcesContent":["let srcdoc: string = '';\nfunction initApp() {\n  // FIXME: App 没必要是全局脚本, 可以直接用 `document.head` 获取本 iframe 的 head 再加上别的数据\n  const app = $('#script-iframe-App').attr('srcdoc');\n  if (!app) {\n    throw Error(`{Render} 未找到要渲染的 html 界面`);\n  }\n  srcdoc = app;\n}\n\nasync function renderOn(message_element: HTMLDivElement, message?: string): Promise<void> {\n  const jquery_message_element = $(message_element);\n  const message_id = parseInt(jquery_message_element.attr('mesid') as string);\n  message = message ?? (await triggerSlash(`/messages names=off ${message_id}`)) ?? '';\n\n  const mes_text = jquery_message_element.find('.mes_text');\n  mes_text.prop('hidden', true);\n\n  const app = jquery_message_element.find('.frontend-app');\n  if (app.length > 0) {\n    app.prop('hidden', false);\n    eventEmit(`app-${message_id}`, message);\n    return;\n  }\n\n  const message_script = `<script>window.message = ${JSON.stringify(message)};</script>`;\n  const message_id_script = `<script>window.message_id = ${message_id};</script>`;\n  const srcdocWithMessage = srcdoc.replace('</head>', `${message_script}${message_id_script}</head>`);\n\n  const iframe = $('<iframe>')\n    .attr('srcdoc', srcdocWithMessage)\n    .addClass('frontend-app')\n    .css('border', 'none')\n    .css('margin', '5px auto')\n    .css('width', '100%')\n    .insertAfter(jquery_message_element.find('.ch_name'));\n\n  const observer = new MutationObserver(() => {\n    const isEditing = $('#curEditTextarea');\n    if (isEditing.parent().is(mes_text)) {\n      mes_text.prop('hidden', false);\n      iframe.prop('hidden', true);\n    }\n  });\n\n  observer.observe(mes_text.get(0) as HTMLElement, { childList: true, subtree: true, characterData: true });\n}\n\nasync function renderAll(): Promise<void> {\n  const nodes = $('#chat').children(\".mes[is_user='false'][is_system='false']\") as JQuery<HTMLDivElement>;\n  for (const node of nodes) {\n    renderOn(node);\n  }\n}\n\nasync function renderLast(message: string): Promise<void> {\n  const node = $('#chat').children('.mes.last_mes').get(0) as HTMLDivElement | undefined;\n  if (node) {\n    renderOn(node, message);\n  }\n}\n\ninitApp();\nrenderAll();\neventOn(tavern_events.MESSAGE_DELETED, renderAll);\neventOn(tavern_events.CHARACTER_MESSAGE_RENDERED, renderAll);\neventOn(tavern_events.USER_MESSAGE_RENDERED, renderAll);\neventOn(tavern_events.MESSAGE_UPDATED, renderAll);\neventOn(tavern_events.MESSAGE_SWIPED, renderAll);\neventOn(tavern_events.STREAM_TOKEN_RECEIVED, renderLast);\n"],"names":["srcdoc","async","renderOn","message_element","message","jquery_message_element","$","message_id","parseInt","attr","triggerSlash","mes_text","find","prop","app","length","eventEmit","message_script","JSON","stringify","message_id_script","srcdocWithMessage","replace","iframe","addClass","css","insertAfter","MutationObserver","parent","is","observe","get","childList","subtree","characterData","renderAll","nodes","children","node","Error","initApp","eventOn","tavern_events","MESSAGE_DELETED","CHARACTER_MESSAGE_RENDERED","USER_MESSAGE_RENDERED","MESSAGE_UPDATED","MESSAGE_SWIPED","STREAM_TOKEN_RECEIVED"],"sourceRoot":""}
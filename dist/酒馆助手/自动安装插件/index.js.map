{"version":3,"file":"index.js","mappings":"AAiDOA,eAAeC,EAA6BC,GACjD,MAAMC,EAAoBD,EACvBE,IAAI,EAAGC,OAAMC,UACZ,IAAIC,EAAMD,EAAIE,QAAQ,cAAe,IAErC,OADAD,EAAMA,EAAIE,UAAUF,EAAIG,YAAY,KAAO,GACpC,CACL,CAACH,GAAM,CACLF,OACAC,UAILK,OAAO,CAACC,EAAUC,IAAYC,EAAEC,SAASH,EAAUC,GAAU,CAAC,GAE3DG,QA7DRhB,iBACE,IACE,MAAMiB,QAAiBC,MAAM,4BAE7B,OAAID,EAASE,UAC4EF,EAASG,QAE7FC,OAAOC,GAAgC,WAAnBA,EAAUC,MAC9BnB,IAAIkB,GAAaA,EAAUjB,KAAKG,QAAQ,eAAgB,KAEpD,EAEX,CAAE,MAAOgB,GAEP,OADAC,QAAQC,MAAMF,GACP,EACT,CACF,CA6CmCG,GAC3BC,EAA2Bd,EAAEe,WAAWC,OAAOC,KAAK5B,GAAoBa,GACtC,IAApCY,EAAyBI,cAKnBC,YAAYC,iBAClB,yBACEN,EAAyBxB,IAAIG,GAAO,KAAKJ,EAAkBI,GAAKF,QAAQ8B,KAAK,QAC/EF,YAAYG,WAAWC,QACvB,GACA,CAAEC,WAAW,YAMXC,QAAQC,WAAWZ,EAAyBxB,IAAIG,GA7DxDP,eAAiCM,GAC/B,MAAMmC,QAAgBvB,MAAM,0BAA2B,CACrDwB,OAAQ,OACRC,QAASV,YAAYW,oBACrBC,KAAMC,KAAKC,UAAU,CACnBzC,UAGJ,IAAKmC,EAAQtB,GAAI,CACf,MAAM6B,QAAaP,EAAQO,OAG3B,OAFAC,OAAOC,QAAQ,GAAGF,GAAQP,EAAQU,aAAc,UAChD1B,QAAQC,MAAM,SAAUe,EAAQW,OAAQX,EAAQU,WAAYH,IACrD,CACT,CAEA,MAAM/B,QAAiBwB,EAAQrB,OAM/B,OALA6B,OAAOI,QACL,WAAWpC,EAASqC,gBAAgBrC,EAASsC,qBAAqBtC,EAASuC,YAC3E,UAEF/B,QAAQgC,MAAM,SAASxC,EAASsC,qBAAqBtC,EAASyC,kBACvD,CACT,CAuC+DC,CAAkBxD,EAAkBI,GAAKD,OACtGsD,WAAW,IAAMC,aAAa,gBAAiB,KACjD,CCnFA,MAAM,EAA+BC,ECC/BC,EAAW,EAAAD,EAAEE,OAAO,CACtB,OAAQ,EAAAF,EAAEG,OAAO,EAAAH,EAAEI,SAAU,EAAAJ,EAAEI,UAAUC,QAAQ,CAAC,KAEtDC,EAAE,KACE,MAAMC,EAAWN,EAASO,MAAMC,aAAa,CAAEhD,KAAM,SAAUiD,UAAWC,iBAC1EC,gBAAgBL,EAAU,CAAE9C,KAAM,SAAUiD,UAAWC,gBACvDb,WAAW,IAAM3D,EAA6B6B,OAAO6C,QAAQN,EAAS,QAAQjE,IAAI,EAAEC,EAAMC,MAAS,CAAGD,OAAMC,UAAU","sources":["src://tavern_helper_template/src/酒馆助手/自动安装插件/check_and_install_extensions.ts","src://tavern_helper_template/external var \"z\"","src://tavern_helper_template/src/酒馆助手/自动安装插件/index.ts"],"sourcesContent":["export {};\n\nasync function get_third_party_extension_names(): Promise<string[]> {\n  try {\n    const response = await fetch('/api/extensions/discover');\n\n    if (response.ok) {\n      const extensions: Array<{ type: 'lcoal' | 'global' | 'system'; name: string }> = await response.json();\n      return extensions\n        .filter(extension => extension.type !== 'system')\n        .map(extension => extension.name.replace('third-party/', ''));\n    } else {\n      return [];\n    }\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n}\n\nasync function install_extension(url: string): Promise<boolean> {\n  const request = await fetch('/api/extensions/install', {\n    method: 'POST',\n    headers: SillyTavern.getRequestHeaders(),\n    body: JSON.stringify({\n      url,\n    }),\n  });\n  if (!request.ok) {\n    const text = await request.text();\n    toastr.warning(`${text || request.statusText}`, '扩展安装失败');\n    console.error('扩展安装失败', request.status, request.statusText, text);\n    return false;\n  }\n\n  const response = await request.json();\n  toastr.success(\n    `已成功安装由 '${response.author}' 编写的 '${response.display_name}' (版本 ${response.version})!`,\n    '扩展安装成功',\n  );\n  console.debug(`已成功将 '${response.display_name}' 安装到 ${response.extensionPath}`);\n  return true;\n}\n\ninterface Extension {\n  name: string;\n  url: string;\n}\n\nexport async function check_and_install_extensions(extensions: Extension[]): Promise<void> {\n  const parsed_extensions = extensions\n    .map(({ name, url }) => {\n      let tag = url.replace(/(\\.git|\\/)$/, '');\n      tag = tag.substring(tag.lastIndexOf('/') + 1);\n      return {\n        [tag]: {\n          name,\n          url,\n        },\n      };\n    })\n    .reduce((previous, current) => _.defaults(previous, current), {});\n\n  const current_extensions = await get_third_party_extension_names();\n  const uninstall_extension_tags = _.difference(Object.keys(parsed_extensions), current_extensions);\n  if (uninstall_extension_tags.length === 0) {\n    return;\n  }\n\n  if (\n    !(await SillyTavern.callGenericPopup(\n      '以下需要的插件尚未安装, 是否安装?<br>' +\n        uninstall_extension_tags.map(tag => `- ${parsed_extensions[tag].name}`).join('<br>'),\n      SillyTavern.POPUP_TYPE.CONFIRM,\n      '',\n      { leftAlign: true },\n    ))\n  ) {\n    return;\n  }\n\n  await Promise.allSettled(uninstall_extension_tags.map(tag => install_extension(parsed_extensions[tag].url)));\n  setTimeout(() => triggerSlash('/reload-page'), 3000);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = z;","import { check_and_install_extensions } from './check_and_install_extensions';\nconst Settings = z.object({\n    自动安装插件: z.record(z.string(), z.string()).default({}),\n});\n$(() => {\n    const settings = Settings.parse(getVariables({ type: 'script', script_id: getScriptId() }));\n    insertVariables(settings, { type: 'script', script_id: getScriptId() });\n    setTimeout(() => check_and_install_extensions(Object.entries(settings.自动安装插件).map(([name, url]) => ({ name, url }))), 10000);\n});\n"],"names":["async","check_and_install_extensions","extensions","parsed_extensions","map","name","url","tag","replace","substring","lastIndexOf","reduce","previous","current","_","defaults","current_extensions","response","fetch","ok","json","filter","extension","type","err","console","error","get_third_party_extension_names","uninstall_extension_tags","difference","Object","keys","length","SillyTavern","callGenericPopup","join","POPUP_TYPE","CONFIRM","leftAlign","Promise","allSettled","request","method","headers","getRequestHeaders","body","JSON","stringify","text","toastr","warning","statusText","status","success","author","display_name","version","debug","extensionPath","install_extension","setTimeout","triggerSlash","z","Settings","object","record","string","default","$","settings","parse","getVariables","script_id","getScriptId","insertVariables","entries"],"sourceRoot":""}
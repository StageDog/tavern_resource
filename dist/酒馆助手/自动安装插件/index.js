async function e(e){const t=e.map(({name:e,url:t})=>{let a=t.replace(/(\.git|\/)$/,'');return a=a.substring(a.lastIndexOf('/')+1),{[a]:{name:e,url:t}}}).reduce((e,t)=>_.defaults(e,t),{}),a=await async function(){try{const e=await fetch('/api/extensions/discover');return e.ok?(await e.json()).filter(e=>'system'!==e.type).map(e=>e.name.replace('third-party/','')):[]}catch(e){return console.error(e),[]}}(),r=_.difference(Object.keys(t),a);0!==r.length&&await SillyTavern.callGenericPopup('以下需要的插件尚未安装, 是否安装?<br>'+r.map(e=>`- ${t[e].name}`).join('<br>'),SillyTavern.POPUP_TYPE.CONFIRM,'',{leftAlign:!0})&&(await Promise.allSettled(r.map(e=>async function(e){const t=await fetch('/api/extensions/install',{method:'POST',headers:SillyTavern.getRequestHeaders(),body:JSON.stringify({url:e})});if(!t.ok){const e=await t.text();return toastr.warning(`${e||t.statusText}`,'扩展安装失败'),console.error('扩展安装失败',t.status,t.statusText,e),!1}const a=await t.json();return toastr.success(`已成功安装由 '${a.author}' 编写的 '${a.display_name}' (版本 ${a.version})!`,'扩展安装成功'),console.debug(`已成功将 '${a.display_name}' 安装到 ${a.extensionPath}`),!0}(t[e].url))),setTimeout(()=>triggerSlash('/reload-page'),3e3))}const t=z,a=t.z.object({自动安装插件:t.z.record(t.z.string(),t.z.string()).default({})});$(()=>{const t=a.parse(getVariables({type:'script',script_id:getScriptId()}));insertVariables(t,{type:'script',script_id:getScriptId()}),setTimeout(()=>e(Object.entries(t.自动安装插件).map(([e,t])=>({name:e,url:t}))),1e4)});
//# sourceMappingURL=index.js.map
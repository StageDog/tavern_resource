$((async()=>{const e=(await getTavernRegexes({enable_state:'enabled'})).filter((e=>e.script_name.includes('预安装插件'))).flatMap((e=>Object.entries(YAML.parse(e.replace_string)))).map((([e,t])=>{let a=t.replace(/(\.git|\/)$/,'');return a=a.substring(a.lastIndexOf('/')+1),{[a]:{name:e,url:t}}})).reduce(((e,t)=>_.defaults(e,t)),{}),t=await async function(){try{const e=await fetch('/api/extensions/discover');return e.ok?(await e.json()).filter((e=>'system'!==e.type)).map((e=>e.name.replace('third-party/',''))):[]}catch(e){return console.error(e),[]}}(),a=_.difference(Object.keys(e),t);0!==a.length&&await SillyTavern.callGenericPopup('以下需要的插件尚未安装, 是否安装?<br>'+a.map((t=>`- ${e[t].name}`)).join('<br>'),SillyTavern.POPUP_TYPE.CONFIRM,'',{leftAlign:!0})&&(await Promise.allSettled(a.map((t=>async function(e){const t=await fetch('/api/extensions/install',{method:'POST',headers:SillyTavern.getRequestHeaders(),body:JSON.stringify({url:e})});if(!t.ok){const e=await t.text();return toastr.warning(`扩展安装失败: ${e||t.statusText}`),console.error('扩展安装失败',t.status,t.statusText,e),!1}const a=await t.json();return toastr.success(`扩展安装成功: 已成功安装由 '${a.author}' 编写的 '${a.display_name}' (版本 ${a.version})!`),console.debug(`已成功将 '${a.display_name}' 安装到 ${a.extensionPath}`),!0}(e[t].url)))),setTimeout((()=>triggerSlash('/reload-page')),3e3))}));
{"version":3,"file":"index.js","mappings":"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","sources":["src://tavern_helper_template/src/世界书/可点击的选择框/脚本/index.ts"],"sourcesContent":["import default_css from './络络扁平化暗色紧凑列表.scss?raw';\n\nconst lorebook_name = '【可点击的选择框】' as const;\nconst roleplay_options_tag = '<roleplay_options>' as const;\nconst roleplay_options_regex = /<roleplay_options>\\s*(?:```.*\\n)?([\\s\\S]*?)(?:\\n```)?\\s*<\\/roleplay_options>/im;\n\n//----------------------------------------------------------------------------------------------------------------------\nnamespace option_section {\n  interface Option {\n    input_mode: '直接发送' | '覆盖输入' | '尾附输入' | '自动推进';\n  }\n  const default_option: Option = {\n    input_mode: '直接发送',\n  };\n\n  export let option: Option;\n\n  async function parse_option(): Promise<Option> {\n    const options: Record<string, string> = _.merge(\n      {},\n      ...(await getLorebookEntries(lorebook_name))\n        .filter(entry => entry.comment.startsWith('设置-') && entry.enabled)\n        .map(entry => {\n          const value = entry.comment.replace('设置-', '');\n          return { [value]: entry.content };\n        }),\n    );\n\n    const result = default_option;\n    if (_.has(options, '直接发送')) {\n      result.input_mode = '直接发送';\n    } else if (_.has(options, '覆盖输入')) {\n      result.input_mode = '覆盖输入';\n    } else if (_.has(options, '尾附输入')) {\n      result.input_mode = '尾附输入';\n    }\n    return result;\n  }\n\n  export async function update(): Promise<boolean> {\n    const old_option = option;\n    option = await parse_option();\n    return !_.isEqual(option, old_option);\n  }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\nnamespace render_section {\n  async function divclick($element: JQuery<HTMLDivElement>) {\n    if ($element.parents('.last_mes').length > 0) {\n      const content = $element.find('.roleplay_options_content').text().trim();\n      if (option_section.option.input_mode === '直接发送') {\n        triggerSlash(`/send ${content} || /trigger`);\n      } else if (option_section.option.input_mode === '覆盖输入') {\n        triggerSlash(`/setinput ${content}`);\n      } else if (option_section.option.input_mode === '尾附输入') {\n        const old_content = $('#send_textarea').val();\n        $('#send_textarea')\n          .val([old_content, content].join('\\n') || '')[0]\n          .dispatchEvent(new Event('input', { bubbles: true }));\n      }\n    }\n  }\n\n  let style: string;\n\n  async function extract_style(): Promise<string> {\n    const entries = (await getLorebookEntries(lorebook_name)).filter(\n      entry => entry.comment.startsWith('样式-') && entry.enabled,\n    );\n    if (entries.length === 0) {\n      return `<style>${default_css}</style>`;\n    }\n    return entries[0].content;\n  }\n\n  export async function update(): Promise<boolean> {\n    const old_style = style;\n    style = await extract_style();\n    return !_.isEqual(style, old_style);\n  }\n\n  export function extract_roleplay_options_element(text: string): JQuery<HTMLDivElement> {\n    const $div = $('<div class=\"roleplay_options\">') as JQuery<HTMLDivElement>;\n    $div.append(style);\n    $div.append(\n      ($('<div class=\"roleplay_options_back\">') as JQuery<HTMLDivElement>).append(\n        [...text.matchAll(/(.+?)[:：]\\s*(.+)/gm)]\n          .map(match => ({\n            title: match[1],\n            content: match[2].replace(/^\\$\\{(.+)\\}$/, '$1').replace(/^「(.+)」$/, '$1'),\n          }))\n          .map(({ title, content }) =>\n            $('<div class=\"roleplay_options_item\" tabindex=\"1\">')\n              .on('click', function (this: HTMLDivElement) {\n                divclick($(this));\n              })\n              .append(`<span class=\"roleplay_options_title\"><strong>${title}</strong></span>`)\n              .append('<hr class=\"roleplay_options_hr\">')\n              .append(`<span class=\"roleplay_options_content\">${content}</span>`),\n          ),\n      ),\n    );\n    return $div;\n  }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\nasync function renderOneMessage(message_id: number) {\n  const message: string = getChatMessages(message_id)[0].message;\n  const match = message.match(roleplay_options_regex);\n  if (!match) {\n    return;\n  }\n  const $roleplay_options_element = render_section.extract_roleplay_options_element(match[1]);\n\n  const $mes_text = retrieveDisplayedMessage(message_id);\n  const $to_render = $mes_text.find(`.roleplay_options, pre:contains(\"${roleplay_options_tag}\")`);\n  if ($to_render.length > 0) {\n    $to_render.remove();\n    $mes_text.append($roleplay_options_element);\n  }\n}\n\nasync function renderAllMessage() {\n  $('#chat')\n    .children(\".mes[is_user='false'][is_system='false']\")\n    .each((_index, node) => {\n      renderOneMessage(Number(node.getAttribute('mesid')));\n    });\n}\n\n$(async () => {\n  await errorCatched(option_section.update)();\n  await errorCatched(render_section.update)();\n  await renderAllMessage();\n  eventOn(tavern_events.CHAT_CHANGED, errorCatched(renderAllMessage));\n  eventOn(tavern_events.CHARACTER_MESSAGE_RENDERED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_UPDATED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_SWIPED, errorCatched(renderOneMessage));\n  eventOn(tavern_events.MESSAGE_DELETED, () => setTimeout(errorCatched(renderAllMessage), 1000));\n  eventOn(\n    tavern_events.WORLDINFO_UPDATED,\n    errorCatched(async lorebook => {\n      if (lorebook !== lorebook_name) {\n        return;\n      }\n      if (!(await option_section.update()) && !(await render_section.update())) {\n        return;\n      }\n      await renderAllMessage();\n    }),\n  );\n});\n\nfunction promoteOnce() {\n  const contents = $('.mes[is_user=\"false\"][is_system=\"false\"]')\n    .last()\n    .find('.roleplay_options_content')\n    .map((_index, element) => $(element).text().trim())\n    .toArray();\n  triggerSlash(`/send ${contents.length === 0 ? '继续推进' : _.sample(contents)} || /trigger`);\n}\nconst promoteOnceDelayed = () =>\n  setTimeout(promoteOnce, _.get(getVariables({ type: 'global' }), [lorebook_name, '自动推进发送间隔'], 3000));\n\nlet current_loop_times: number | null = null;\nfunction LoopOnce() {\n  if (current_loop_times === null) {\n    return;\n  }\n  promoteOnceDelayed();\n\n  ++current_loop_times;\n  if (current_loop_times === _.get(getVariables({ type: 'global' }), [lorebook_name, '自动推进循环次数'], -1)) {\n    StopLoop();\n  }\n}\nfunction StopLoop() {\n  eventRemoveListener(tavern_events.CHARACTER_MESSAGE_RENDERED, LoopOnce);\n  current_loop_times = null;\n  toastr.success('已停止自动推进', lorebook_name);\n}\n\n$(async () => {\n  eventOnButton('设置循环次数', async () => {\n    const result = Number(\n      await SillyTavern.callGenericPopup(\n        `设置循环次数 (-1 为直到按下 '停止自动推进')`,\n        SillyTavern.POPUP_TYPE.INPUT,\n        _.get(getVariables({ type: 'global' }), [lorebook_name, '自动推进循环次数'], '-1'),\n      ),\n    );\n    if (result !== -1 && result <= 0) {\n      toastr.error('循环次数要么是 -1, 要么是大于 0 的整数');\n      return;\n    }\n    insertOrAssignVariables({ [lorebook_name]: { 自动推进循环次数: result } }, { type: 'global' });\n    if (result === -1) {\n      toastr.success('已设置推进次数为 -1, 即直到按下 \"停止自动推进\" 才会停止', lorebook_name);\n    } else {\n      toastr.success(`已设置推进次数为 ${result} 次`, lorebook_name);\n    }\n  });\n\n  eventOnButton('设置发送间隔', async () => {\n    const result = Number(\n      await SillyTavern.callGenericPopup(\n        `设置发送间隔 (单位: 毫秒)`,\n        SillyTavern.POPUP_TYPE.INPUT,\n        _.get(getVariables({ type: 'global' }), [lorebook_name, '自动推进发送间隔'], '3000'),\n      ),\n    );\n    if (result <= 0) {\n      toastr.error('发送间隔必须大于 0');\n      return;\n    }\n    insertOrAssignVariables({ [lorebook_name]: { 自动推进发送间隔: result } }, { type: 'global' });\n    toastr.success(`已设置发送间隔为 ${result} 毫秒`, lorebook_name);\n  });\n\n  eventOnButton('启动自动推进', () => {\n    if (current_loop_times !== null) {\n      toastr.error('自动推进在之前已开启, 请先停止自动推进');\n      return;\n    }\n    current_loop_times = 0;\n    LoopOnce();\n    eventOn(tavern_events.CHARACTER_MESSAGE_RENDERED, LoopOnce);\n    toastr.success('已开启自动推进', lorebook_name);\n  });\n\n  eventOnButton('停止自动推进', StopLoop);\n});\n"],"names":["lorebook_name","roleplay_options_regex","option_section","render_section","async","renderOneMessage","message_id","match","getChatMessages","message","$roleplay_options_element","extract_roleplay_options_element","$mes_text","retrieveDisplayedMessage","$to_render","find","length","remove","append","renderAllMessage","$","children","each","_index","node","Number","getAttribute","promoteOnce","contents","last","map","element","text","trim","toArray","triggerSlash","_","sample","default_option","input_mode","update","old_option","option","options","merge","getLorebookEntries","filter","entry","comment","startsWith","enabled","value","replace","content","result","has","parse_option","isEqual","style","old_style","entries","extract_style","$div","matchAll","title","on","$element","parents","old_content","val","join","dispatchEvent","Event","bubbles","divclick","this","errorCatched","eventOn","tavern_events","CHAT_CHANGED","CHARACTER_MESSAGE_RENDERED","MESSAGE_UPDATED","MESSAGE_SWIPED","MESSAGE_DELETED","setTimeout","WORLDINFO_UPDATED","lorebook","current_loop_times","LoopOnce","get","getVariables","type","StopLoop","eventRemoveListener","toastr","success","eventOnButton","SillyTavern","callGenericPopup","POPUP_TYPE","INPUT","error","insertOrAssignVariables"],"sourceRoot":""}